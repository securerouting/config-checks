#!/usr/bin/env python
#
#  Copyright (c) 2015, Parsons, Inc
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  *  Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  *  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  *  Neither the name of Parsons, Inc nor the names of its contributors may
#     be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
#  IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# rcynicchk	This script validates the contents of an rcynic.conf file.  It
#		performs several levels of checks.  Currently, these are basic
#		checks and recommended-value checks.  The basic checks ensure
#		that the config values have a rudimentary level of sanity; for
#		example, directories are directories, booleans are true/false
#		values.  Recommended-value checks see if values are set to
#		recommended values.
#
#
#	This is the call tree for the routines (mostly) defined in this module.
#	This tree might make it easier to update rcynicchk in the future.
#
#		main()
#			getopts()
#
#			readconf()		[in confvalidation.py]
#
#			check_rcynic()
#				basic_checks()
#					basic_rcynic()
#
#				recval_checks()
#					recval_chk()
#
#			results()
#				basic_results()
#					giveproblems()
#					givesummary()
#					givetable()
#					giveparseerrs()
#
#				recval_results()
#					giveproblems()
#					givesummary()
#					givetable()
#					giveparseerrs()
#
#	It is highly likely that some of these routines can be collapsed
#	into a smaller number of more general routines.  For now, though,
#	this is the way it is.
#
#
# Revision History
#	1.0	Initial revision.				150528
#
#	Copyright 2015 PARSONS, Inc.  All rights reserved.
#	Written by Wayne Morrison, 150528.
#


import os
import sys
import argparse

import rpki.config
import rpki.exceptions

from confvalidation import *

#
# Version information.
#
NAME = "rcynicchk"
VERS = NAME + " version: 1.3"

#------------------------------------------------------------------------
# Options handled:
#		-config conffile	specify config file to read
#		-list			list configuration-section information
#
#		-problems		give problems found
#		-summary		give summary of checks
#		-table			show table of results
#
#		-basic			only basic checks
#		-recval			only recommended-value checks
#
#		-verbose		turn on verbose output
#		-help			give usage message and exit
#		-manpage		print the manpage and exit
#		-Version		give command version info and exit
#

# Default configuration file.
DEFCONF = '/etc/rcynic.conf'

conffile = DEFCONF				# Configuration file.

dobasic  = 0					# Basic checks only.
dorecval = 0					# Recommended-value checks only.

showsummary = 0					# Summarize checks only.
showtable   = 0					# Show table of results.
showprobs   = 0					# Show problems found.

verbose = 0					# Verbose flag.

#------------------------------------------------------------------------
# Globbies.
#

CHECKS_BASIC  = 0;		# Flag for basic checks.
CHECKS_RECVAL = 2;		# Flag for recommended-value checks.

cfg = None			# Data from configuration file.

badsect = {}			# Invalid config section names.
errors = {}			# Error counts by config sections.
parseerrs = {}			# Parsing errors.
unchecked = {}			# Unchecked-field counts by sections.
valids = {}			# Valid lines by config sections.

rv_errors = {}			# Recval-check error counts by config sections.
rv_unchecked = {}		# Recval-check unchecked-field counts by sects.
rv_valids = {}			# Recval-check valid lines by config sections.

problems = {}			# Details of basic problems in a section.
rv_problems = {}		# Details of recval-check problems in a section.


#------------------------------------------------------------------------
# Routine:	main()
#
# Purpose:	Do everything.
#
def main():
	global cfg			# Configuration file contents.

	#
	# Parse our command line.
	#
	getopts()

	#
	# Read the configuration file.
	#
	cfg = readconf(conffile)

	#
	# Possibly give section info from config file.
	#
	if(getlistflag()):
		lister(conffile,cfg,'rcynic')
		exit(0)

	#
	# Check the rsyncd.conf file.
	#
	check_rcynic()

	#
	# Tell the user what they want to know.
	#
	results()

	sys.exit(0)


#------------------------------------------------------------------------
# Routine:	getopts()
#
# Purpose:	Parse the command line for options, most importantly to
#		find a potential non-standard config file.
#
def getopts():
	global conffile				# Configuration file.
	global showprobs			# Show problems found.
	global showsummary			# Summarize checks only.
	global showtable			# Show results table.
	global verbose				# Give verbose output.
	global dobasic				# Basic checks only.
	global dorecval				# Recommended-value checks only.
	listflag = 0				# Section-listing flag.
	summary = 0				# Give-summary flag.
	verbose = 0				# Verbose flag.

	#
	# Build our usage string.
	#
	usagestr = usage(0)

	#
	# Build the options parser.
	#
	ap = argparse.ArgumentParser()

	#
	# Add the recognized options.
	#
	ap.add_argument('-config', help='path of rcynic.conf to check')

	ap.add_argument('-list', action='store_true', help='only list values in rcynic.conf file')

	ap.add_argument('-basic', action='store_true', help='only run basic checks')
	ap.add_argument('-recval', action='store_true', help='only run recommended-value checks')

	ap.add_argument('-problems', action='store_true', help='show problems found')
	ap.add_argument('-summary', action='store_true', help='summarize results')
	ap.add_argument('-table', action='store_true', help='provide results of basic checks in tabular form')

	ap.add_argument('-verbose', action='store_true', help='provide verbose output')
	ap.add_argument('-Version', action='store_true', help='display program version')
	ap.add_argument('-help',    action='store_true', help='display help message')
	ap.add_argument('-manpage', action='store_true', help='display manpage')

	#
	# Now parse the options.
	#
	args = ap.parse_args()

	#
	# Check for some immediate options.
	#
	if(args.Version):		version()
	if(args.help):			usage(1)
	if(args.manpage):		manpage()
	if(args.list):			listflag    = 1
	if(args.problems):		showprobs   = 1
	if(args.summary):		showsummary = 1
	if(args.table):			showtable   = 1
	if(args.verbose):		verbose	    = 1

	#
	# Handle the check-specific options.
	#
	if(args.basic):		dobasic  = 1
	if(args.recval):	dorecval = 1
	if((not dobasic) and (not dorecval)):
		dobasic  = 1
		dorecval = 1

	#
	# Set our option values in the confvalidation module.
	#
	setopts(listflag,0,0,verbose)

	#
	# Get the config file from the arguments.  If one wasn't specified
	# with -config, we'll use our (previously set) default.
	#
	if(args.config == None):
		vprint("using default config file - \"%s\"", conffile)
	else:
		conffile = args.config

	#
	# Ensure the selected config file exists and is readable.
	#
	if(existchk(conffile) == 0):
		print "configuration file \"%s\" does not exist" % conffile
		exit(1);
	if(readchk(conffile) == 0):
		print "configuration file \"%s\" is unreadable" % conffile
		exit(1);

	#
	# If none of the output-type options were selected, then we'll
	# use them all.
	#
	if((showprobs == 0) and (showsummary == 0) and (showtable == 0)):
		showprobs   = 1
		showsummary = 1
		showtable   = 1


#########################################################################
#
# The following group of handlers validate the entries in the configuration
# file.  Each handler has a handler function and a dictionary mapping the
# section fields to a verification routine.
#

#------------------------------------------------------------------------
# Handler:	basic_rcynic()
#

fields_rcynic = {
			'allow-crl-digest-mismatch'	:	chkbool,
			'allow-digest-mismatch'		:	chkbool,
			'allow-non-self-signed-trust-anchor':	chkbool,
			'allow-object-not-in-manifest'	:	chkbool,
			'allow-stale-crl'		:	chkbool,
			'allow-stale-manifest'		:	chkbool,
			'authenticated'			:	chkdir,
			'jitter'			:	chkint,
			'lockfile'			:	chkfile,
			'log-level'			:	chkloglevel,
			'max-parallel-fetches'		:	chkint,
			'prune'				:	chkbool,
			'require-crl-in-manifest'	:	chkbool,
			'rsync-early'			:	chkbool,
			'rsync-program'			:	chkfile,
			'rsync-timeout'			:	chkint,
			'run-rsync'			:	chkbool,
			'syslog-facility'		:	chksyslog,
			'trust-anchor'			:	chkfile,
			'trust-anchor-directory'	:	chkdir,
			'trust-anchor-locator'		:	chkfile,
			'unauthenticated'		:	chkdir,
			'use-links'			:	chkbool,
			'use-stderr'			:	chkbool,
			'use-syslog'			:	chkbool,
			'xml-summary'			:	chkfile,
		}

def basic_rcynic(fkey,fval,trval):
	global errors			# Error counts by config sections.
	global unchecked		# Unchecked-field counts by sections.
	global valids			# Valid-field counts by sections.

	if(not hasattr(basic_rcynic, "called")):
		basic_rcynic.called = 0		# Called flag.
		errors['rcynic'] = 0
		unchecked['rcynic'] = 0
		valids['rcynic'] = 0
	basic_rcynic.called += 1

	#
	# Initialize some result values.
	#
	error = 0
	unchk = 0

	if(fields_rcynic.has_key(fkey)):
		if(fields_rcynic[fkey] != None):
			error = fields_rcynic[fkey](trval, fkey)
		else:
			unchk = 1
	else:
		#
		# Handle special cases.
		#

		#
		# Right now, the only known special case is the definition
		# of syslog priorities.
		#
		if(re.search('^syslog-priority-', fkey, re.I) != None):
			atoms = re.split('-', fkey)
			error = chksyslogpriority(trval, fkey)
		else:
			print "rcynicchk:  specialty checking required for field <%s>" % fkey

	#
	# Add the results to our running totals.
	#
	errors['rcynic']    += error
	unchecked['rcynic'] += unchk
	valids['rcynic']    += (not error)




#------------------------------------------------------------------------
# This dictionary maps config-file sections to handlers for each
# section's fields for basic checks.
#
basic_secthandlers =	{
				'rcynic' :	basic_rcynic,
			}


#########################################################################

#------------------------------------------------------------------------
# Routine:	basic_checks()
#
# Purpose:	Run the basic checks on the config file's fields.
#		This checks for things like missing files, bad permissions
#		on key files, directory not actually a directory, etc.
#
def basic_checks():
	global cfg			# Configuration file contents.
	global basic_secthandlers	# Handlers for config file sections.
	global parseerrs		# Collected parsing errors.
	global badsect			# Invalid config section names.

	probcnt = 0			# Count of problems we found.

	#
	# Reset our list of problems.
	#
	getproblems(1)

					
	#
	# The section wasn't recognized, so record the error and return.
	#
	if(basic_secthandlers.has_key('rcynic') == 0):
		badsect = 1
		return(1)

	#
	# Run the validation checks for the rcynic section.
	#
	for (fkey, fval) in cfg.cfg.items('rcynic'):

		#
		# We'll try to get the key's translated value.
		#
		try:
			trval = cfg.get(fkey, section = 'rcynic')

		except Exception, evt:
			#
			# The key wasn't recognized, so we'll save its name.
			#
			evtstr = str(evt)
			if(parseerrs.has_key(evtstr)):
				parseerrs[evtstr] += 1
			else:
				parseerrs[evtstr] = 1
				print evtstr
			continue

		#
		# Call the section handler for this particular key and value.
		#
		basic_secthandlers['rcynic'](fkey,fval,trval);

	#
	# Squirrel away the problems found in the rcynic section.
	#
	problems['rcynic'] = getproblems(1)
	probcnt += len(problems)


	#
	# Return the number of problems we found in the file.
	#
	return(probcnt)


#########################################################################

#------------------------------------------------------------------------
# Handler:	recval_chk()
#

#
# The three fields of each line are:
#	simple-comparison flag	(1 - simple comparison; 0 - variable to eval)
#	field to check
#	value to compare to
#
# The first four fields in this list are absolutely given as strongly
# recommended to have those values.
# The last three are derived from documentation.
#
rv_fields = [
		1, 'rcynic:allow-digest-mismatch',		'true',
		1, 'rcynic:allow-crl-digest-mismatch',		'true',
		1, 'rcynic:allow-non-self-signed-trust-anchor',	'false',
		1, 'rcynic:run-rsync',				'true',

		1, 'rcynic:jitter',				'600',
		1, 'rcynic:rsync-timeout',			'300',
		0, 'rcynic:max-parallel-fetches',		'2:4',
	    ]

def recval_chk(sect):
	global rv_errors	# Recval-check error counts by config sections.
	global rv_unchecked	# Recval-check unchecked-field counts by sects.
	global rv_valids	# Recval-check valid-field counts by sections.
	global rv_problems	# List of problems found in recval checks.

	#
	# Initialize some result values.
	#
	count = 0
	error = 0
	unchk = 0
	probs = list()

	#
	# Compare each triplet in this section's recval-check array to 
	# see if they're equal.
	#
	for ind in range(0, len(rv_fields), 3):
		flag = rv_fields[ind]
		val1 = rv_fields[ind+1]
		val2 = rv_fields[ind+2]

		#
		# Divide the field to check into its section/field pieces.
		#
		loc = re.split(':', val1)

		#
		# Skip this group if it isn't in the given section.
		#
		if(loc[0] != sect):
			continue

		#
		# We'll try to get the key's translated value.
		#
		try:
			trval = cfg.get(loc[1], section = 'rcynic')

		except Exception, evt:
			#
			# The key wasn't recognized, so we'll save its name.
			#
			probs.append("unchecked field:  %s not in rcynic section" % loc[1])
			unchk += 1
			continue

		if(flag == 1):

			#
			# Compare the check field to the related value.
			#
			error += comp1val(cfg, loc[0], loc[1], val2)
			count += 1

		else:
			#
			# Currently, the only special-case checking needed
			# for the recommended-values is to ensure that the
			# max-parallel-fetches value is within a certain range.

			#
			# Divide the remote field into its section/field pieces.
			#
			rng = re.split(':', val2)

			#
			# Compare these values.
			#
			error += comprange(cfg, loc[0], loc[1], int(rng[0]), int(rng[1]))
			count += 1

	#
	# Add the results to our running totals.
	#
	rv_errors[sect]    += error
	rv_unchecked[sect] += unchk
	rv_valids[sect]    += (count - error)

	#
	# Squirrel away the problems and unchecked fields found in this section.
	#
	rv_problems[sect] = getproblems(1)
	if(len(probs) > 0):
		rv_problems[sect] += probs


#########################################################################

#------------------------------------------------------------------------
# Routine:	recval_checks()
#
# Purpose:	Run the recommended-value checks on the config file's fields.
#		This checks for things like ensuring that rsync will be run,
#		jitter isn't too high, etc.
#
def recval_checks():
	global conffile			# Configuration file.
	global cfg			# Configuration file contents.
	global parseerrs		# Collected parsing errors.
	global badsect			# Invalid config section names.

	probcnt = 0			# Count of problems we found.

	#
	# Reset our list of problems.
	#
	getproblems(1)

	#
	# Initialize our data aggregations.
	#
	rv_errors['rcynic'] = 0
	rv_unchecked['rcynic'] = 0
	rv_valids['rcynic'] = 0

	#
	# Run the validation checks for the rcynic section.
	#
	recval_chk('rcynic')

	#
	# Return the number of problems we found in the file.
	#
	return(probcnt)


#########################################################################

#------------------------------------------------------------------------
# Routine:	check_rcynic()
#
# Purpose:	Run the validation checks on the config file's fields.
#
def check_rcynic():

	#
	# Run the basic checks to ensure the rcynic.conf file is at least
	# minimally okay.
	#
	if(dobasic):
		basic_checks()

	#
	# Run the recommended-value checks.
	#
	if(dorecval):
		recval_checks()


#########################################################################


#------------------------------------------------------------------------
# Routine:	basic_results()
#
# Purpose:	Give the results of the basic validation checks.
#
def basic_results():

	print ""
	print "Basic Results"

	#
	# Don't print section results if -summary was specified.
	#
	givetable(CHECKS_BASIC)

	#
	# Show the specific problems found in the basic checks.
	#
	giveproblems(CHECKS_BASIC)

	#
	# Summarize the basic validation checks.
	#
	givesummary(CHECKS_BASIC)

	#
	# Print any parsing errors we encountered.
	#
	giveparseerrs()


#------------------------------------------------------------------------
# Routine:	recval_results()
#
# Purpose:	Give the results of the recommended-value validation checks.
#
def recval_results():

	print "\n"
	print "Recommended-Value Results"

	#
	# Don't print section results if -summary was specified.
	#
	givetable(CHECKS_RECVAL)

	#
	# Show the specific problems found in the recommended-value checks.
	#
	giveproblems(CHECKS_RECVAL)

	#
	# Summarize the recommended-value validation checks.
	#
	givesummary(CHECKS_RECVAL)

	#
	# Print any parsing errors we encountered.
	#
	giveparseerrs()


#------------------------------------------------------------------------
# Routine:	results()
#
# Purpose:	Give the results of the validation checks.
#
def results():

	if(dobasic):
		basic_results()

	if(dorecval):
		recval_results()


#------------------------------------------------------------------------
# Routine:	giveproblems()
#
# Purpose:	Show the problems found in each section.
#
def giveproblems(chktype):
	global problems
	probcnt = 0			# Count of problems we're reporting.

	#
	# Don't do anything here if we aren't supposed to show problems.
	#
	if(showprobs == 0):
		return

	#
	# Select the problem list.  If an invalid check type was specified,
	# then we'll manufacture a new problem to report.
	#
	if(chktype == CHECKS_BASIC):
		problist = problems
	elif(chktype == CHECKS_RECVAL):
		problist = rv_problems
	else:
		problist = list()
		list[0] = "unknown check type - ", chktype

	#
	# Give a short message and return if we didn't find any problems.
	#
	if((len(problist) == 0) and (verbose == 0)):
		print "no problems found\n"
		print "no problems -- RETURNING!!!"
		return

	for sect in sorted(problist):
		maxlen = -1			# Maximum section-name length.

		probarr = problist[sect]

		probs = len(probarr)
		probcnt += probs
#		print "%s probcnt - %d" % (sect, probs)

		#
		# If this section had no problems, go to the next section.
		# If we're verbose, give a nice informational message first.
		#
#		if((len(probarr) == 0) and (len(errarr) == 0)):
		if(probs == 0):
			if(verbose):
				print "%s section:  no problems\n" % sect

			continue

		#
		# Get the longest field name.
		#
		for prob in sorted(probarr):
			pieces = re.split(':', prob)
			if(len(pieces[0]) > maxlen):	maxlen = len(pieces[0])
		maxlen += 1

		#
		# Print the section name and the problems in the section.
		#
		print "problems in %s section:" % sect
		for prob in probarr:
			pieces = re.split(':[ \t]*', prob)
			pieces[0] += ':'
			print "%-*s  %s" % (maxlen, pieces[0], pieces[1])

		print ""

	#
	# Give a short message if we didn't find any problems.
	# Maybe give a problem count if there were problems.
	#
	if(probcnt == 0):
		print "no problems found\n"
	elif(verbose):
		print "problems found:  %d\n" % probcnt


#------------------------------------------------------------------------
# Routine:	givesummary()
#
# Purpose:	Give a summary of the validation checks results.
#
def givesummary(chktype):

	totalerrs = 0			# Total count of errors found.
	totalunchks = 0			# Total count of unchecked fields.
	totalvalids = 0			# Total count of valid fields found.

	if(showsummary == 0):
		return

	if(chktype == CHECKS_BASIC):

		#
		# Calculate the totals we'll be reporting.
		#
		for key in errors.keys():	totalerrs += errors[key]
		for key in unchecked.keys():	totalunchks += unchecked[key]
		for key in valids.keys():	totalvalids += valids[key]

		print "summary of basic results:"
		print "\ttotal valid fields (basic checks):  %d" % totalvalids
		print "\ttotal errors:  %d" % totalerrs
		print "\ttotal unchecked fields:  %d" % totalunchks

	elif(chktype == CHECKS_RECVAL):

		#
		# Calculate the totals we'll be reporting.
		#
		for key in rv_errors.keys():	totalerrs   += rv_errors[key]
		for key in rv_unchecked.keys():	totalunchks += rv_unchecked[key]
		for key in rv_valids.keys():	totalvalids += rv_valids[key]

		print "total valid fields (recommended-value checks):  %d" % totalvalids
		print "total errors:  %d" % totalerrs
		print "total unchecked fields:  %d" % totalunchks


#------------------------------------------------------------------------
# Routine:	givetable()
#
# Purpose:	Give the results in tabular form.
#
#		This is a preliminary form.  This will undoubtedly
#		improve over time.
#
def givetable(chktype):

	maxlen = -1			# Maximum section-name length.
	old_format = 0			# Flag for using old output format.

	if(showtable == 0):
		return

	if(chktype == CHECKS_BASIC):

		#
		# Get the longest key name.
		#
		for key in sorted(valids):
			if(len(key) > maxlen):	maxlen = len(key)

		#
		# Bump the longest key length a shade and print the
		# column headers.
		#
		print "%-*s%12s\t%12s\t%12s" % (maxlen, 'Section', 'Valid', 'Errors', 'Unchecked')

		#
		# Print the results for each section we checked.
		#
		for key in sorted(valids):
			print "%-*s%12d\t%12d\t%12d" % (maxlen, key,
								valids[key],
								errors[key],
								unchecked[key])

		print ""

	elif(chktype == CHECKS_RECVAL):

		labsect = {}

		#
		# Get the longest key name.
		#
		for key in sorted(rv_valids):
			newkey = re.sub('_recval', '', key)
			if(len(newkey) > maxlen): maxlen = len(newkey)
			labsect[key] = newkey

		#
		# Bump the longest key length a shade and print the
		# column headers.
		#
		print "%-*s%12s\t%12s\t%12s" % (maxlen, 'Section', 'Valid', 'Errors', 'Unchecked')

		#
		# Print the results for each section we checked.
		#
		for key in sorted(rv_valids):
			print "%-*s%12d\t%12d\t%12d" % (maxlen, labsect[key],
							rv_valids[key],
							rv_errors[key],
							rv_unchecked[key])

		print ""


#------------------------------------------------------------------------
# Routine:	giveparseerrs()
#
# Purpose:	Print the parsing problems encountered.
#
def giveparseerrs():
	global parseerrs		# Collected parsing errors.
	global badsect			# Invalid config section names.

	#
	# Report bad section keys .
	#
	if(len(parseerrs) > 0):
		print ""
		for evt in parseerrs.keys():
			print "config parse error:  %s" % evt
			print "\tentries affected:  %d" % parseerrs[evt]
			print ""

	#
	# Report bad section names.
	#
	nbs = len(badsect)
	if(nbs > 0):
		print ""
		if(nbs > 1):
			print "%d invalid sections:" % nbs
		else:
			print "1 invalid section:"

		for key in badsect.keys():
			print "\t\"%s\"" % key


#----------------------------------------------------------------------
# Routine:	version()
#
# Purpose:	Print the version number(s) and exit.
#
def version():
	print(VERS)
	exit(0)


#----------------------------------------------------------------------
# Routine:	usage()
#
# Purpose:	Do something with the usage message.
#
#		If the prtflag parameter is non-zero, we'll print and exit.
#		If it is zero, we'll just return the string.
#
def usage(prtflag):

	#
	# Set up our usage string.
	#
	outstr = """usage:  rcynicchk [options] <command arguments>

        where [options] are:
                -config conffile        specify configuration file to validate

                -list                   only list values in rcynic.conf file

                -basic                  only run basic checks
                -recval                 only run recommended-value checks

                -problems               only show problems found
                -summary                give summary of checks only
                -table                  provide results in tabular form

                -verbose                give verbose output
                -Version                show version and exit
                -help                   show usage message and exit
                -manpage                show manual page and exit
 """

	#
	# Just return the output if we aren't to print the usage string.
	#
	if(prtflag == 0):
		return(outstr)

	#
	# Print the usage string and exit.
	#
	print(outstr.rstrip())
	exit(0)

#------------------------------------------------------------------------


manpage_info = '''

NAME

rcynicchk - validates the contents of an rcynic.conf file

SYNOPSIS

  rcynicchk [options]

DESCRIPTION

rcynicchk validates the contents of an rcynic.conf file.  The configuration
file is validated to ensure that reasonable values are specified for the
various fields.

Some fields are not able to be fully validated.  For example, the
"rsync-program" field can be checked to ensure that it is a valid file,
but it cannot be checked to ensure that the file is an rsync program.

The default configuration file is /etc/rcynic.conf.  The -config option
allows the user to specify an alternate file to be validated.

CHECK TYPES

rcynicchk performs two types of checks -- basic checks and recommended-value
checks.  Both types of checks are performed by default.  The -basic and
-recval options allow only one type of check to be performed.

Basic checks are rudimentary checks of the configuration values in an
rcynic.conf file.  For example, it checks that the trust anchor directory
is actually a directory, but not that it is only filled with trust anchors.

Recommended-value checks ensure that certain fields in an rcynic.conf file 
have the values recommended by the developers of the rpki.net software.

RESULT REPORTING

rcynicchk provides three types of output:  a problem report, a table of
results, and a summary.  All three are given by default.  However, any
combination of the three may be selected by using the -problems, -table,
and -summary options.

In addition to validating the contents of an rcynic.conf file, rcynicchk can
display the contents.  The -list option will display fields and values in
the rcynic.conf file, but no validation will be performed.

OPTIONS

rcynicchk takes the following options:
        -config conffile         specify configuration file to validate
        -list                    only list configuration-section information

        -basic                   only run basic checks
        -recval                  only run recommended-value checks (NYI)

	-problems		 only show problems found
        -summary                 give summary of checks only
	-table			 provide results in tabular form

        -verbose                 give verbose output
        -Version                 show version and exit
        -help                    show usage message and exit
        -manpage                 show the manual page and exit

COPYRIGHT

Copyright 2015 PARSONS, Inc.  All rights reserved.

AUTHOR

Wayne Morrison, tewok@tislabs.com

SEE ALSO

"RSI-EARS Step-By-Step Guide: Validation Checks Performed for rcynic.conf Files"

'''


#----------------------------------------------------------------------
# Routine:	manpage()
#
# Purpose:	Print the internal manual page and exit.
#
def manpage():
	print(manpage_info)
	exit(0)


#------------------------------------------------------------------------

#
# Do everything.
#
main()
exit(0)
